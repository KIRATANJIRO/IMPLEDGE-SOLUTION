#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_set>
#include <chrono>
#include <unordered_map>

using namespace std;
using namespace chrono;

class TrieNode {
public:
    bool isEnd;
    unordered_map<char, TrieNode*> children;

    TrieNode() : isEnd(false) {}
};

class Trie {
public:
    TrieNode root;

    void insert(const string& word) {
        TrieNode* node = &root;
        for (char ch : word) {
            if (node->children.find(ch) == node->children.end()) {
                node->children[ch] = new TrieNode();
            }
            node = node->children[ch];
        }
        node->isEnd = true;
    }

    bool search(const string& word) const {
        const TrieNode* node = &root;
        for (char ch : word) {
            auto it = node->children.find(ch);
            if (it == node->children.end()) {
                return false;
            }
            node = it->second;
            if (node->isEnd) {
                return true;
            }
        }
        return false;
    }

private:
    const TrieNode* getNode(const TrieNode* node, char ch) const {
        auto it = node->children.find(ch);
        return (it != node->children.end()) ? it->second : nullptr;
    }
};

string CompundedWord(const vector<string>& words, const Trie& trie);
string LongestCompundedWord(const vector<string>& words, const Trie& trie, const string& l1);
bool isCompoundWord(const Trie& trie, const string& word);
string findsecondLongestCompoundedWord(const vector<string>& words, Trie& trie);

int main() {
    auto start = high_resolution_clock::now();

    // Read input file
    ifstream inputFile("input_01.txt");
    vector<string> words;
    string word;
    while (getline(inputFile, word)) {
        words.push_back(word);
    }
    inputFile.close();

    // Build Trie
    Trie trie;
    for (const string& word : words) {
    //  cout << word<<" ";
        trie.insert(word);
    }

    // Identify l1 and second-l1 compounded words
    string l1 = CompundedWord(words, trie);
    string Longest = LongestCompundedWord(words, trie, l1);

    auto secondLongest = findsecondLongestCompoundedWord(words, trie);

    // Measure time taken
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);

    // Display results
    cout << "Longest Compound Word: " << Longest << endl;
    cout << "Second Longest Compund Word: " << secondLongest << endl;
    cout << "Time taken to process file: " << duration.count() << " milliseconds" << endl<<endl;

// ==========================================================================================================================================

    auto start1 = high_resolution_clock::now();

    // Read input file
    ifstream inputFile2("Input_02.txt");
    // vector<string> words;
    // string word;
    while (getline(inputFile2, word)) {
        words.push_back(word);
    }
    inputFile2.close();

    // Build Trie
    // Trie trie;
    for (const string& word : words) {
    //  cout << word<<" ";
        trie.insert(word);
    }

    // Identify l1 and second-l1 compounded words
     l1 = CompundedWord(words, trie);
     Longest = LongestCompundedWord(words, trie, l1);

     secondLongest = findsecondLongestCompoundedWord(words, trie);

    // Measure time taken
    auto stop1 = high_resolution_clock::now();
    auto duration1 = duration_cast<milliseconds>(stop1 - start1);

    // Display results
    cout << "Longest Compound Word: " << Longest << endl;
    cout << "Second Longest Compund Word: " << secondLongest << endl;
    cout << "Time taken to process file: " << duration1.count() << " milliseconds" << endl;
    return 0;
}


string CompundedWord(const vector<string>& words, const Trie& trie) {
    string l1;
    for (const string& word : words) {
        if (isCompoundWord(trie, word) && word.length() > l1.length() && word.find('x') == string::npos) {
            l1 = word;
        }
    }
    return l1;
}

string LongestCompundedWord(const vector<string>& words, const Trie& trie, const string& l1) {
    string longest = l1;
    string secondLongest;

    for (const string& word : words) {
        if (isCompoundWord(trie, word) && word.length() > longest.length() && word.find('x') == string::npos) {
            secondLongest = longest;
            longest = word;
        }
    }

    return longest;
}

bool isCompoundWord(const Trie& trie, const string& word) {
    int n = word.length();
    for (int i = 1; i < n; ++i) {
        string prefix = word.substr(0, i);
        string suffix = word.substr(i);

        // Check if both prefix and suffix exist in the trie as valid words
        if (trie.search(prefix) && trie.search(suffix)) {
            return true;
        }
    }
    return false;
}

// Function definition for findsecondLongestCompoundedWord
string findsecondLongestCompoundedWord(const vector<string>& words, Trie& trie) {
    string l1;
    string secondLongest;

    for (const string& word : words) {
        if (isCompoundWord(trie, word) && word.length() > l1.length() && word.find('x') == string::npos) {
            secondLongest = l1;
            l1 = word;
        }
    }

    return secondLongest;
}
